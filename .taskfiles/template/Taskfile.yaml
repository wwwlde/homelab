---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  MAKEJINJA_CONFIG_FILE: "{{.ROOT_DIR}}/makejinja.toml"
  TEMPLATE_DIR: "{{.ROOT_DIR}}/templates"
  TEMPLATE_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/template/resources"
  TEMPLATE_CONFIG_FILE: '{{.ROOT_DIR}}/settings.yaml'
  # TEMPLATE_NODE_CONFIG_FILE: '{{.ROOT_DIR}}/nodes.yaml'

tasks:
  :init:
    desc: Initialize configuration files
    cmds:
      - task: generate-age-key
      - task: generate-deploy-key
      - task: generate-push-token

  generate-age-key:
    internal: true
    cmd: age-keygen --output {{.SOPS_AGE_KEY_FILE}}
    status:
      - test -f {{.SOPS_AGE_KEY_FILE}}
    preconditions:
      - which age-keygen

  generate-deploy-key:
    internal: true
    cmd: ssh-keygen -t ecdsa -b 521 -C "deploy-key" -f {{.ROOT_DIR}}/github-deploy.key -q -P ""
    status:
      - test -f {{.ROOT_DIR}}/github-deploy.key
    preconditions:
      - which ssh-keygen

  generate-push-token:
    internal: true
    cmd: python -c "import secrets; print(secrets.token_hex(16))" > {{.ROOT_DIR}}/github-push-token.txt
    status:
      - test -f {{.ROOT_DIR}}/github-push-token.txt

  :configure:
    desc: Render and validate configuration files
    prompt: Any conflicting files in the kubernetes directory will be overwritten... continue?
    cmds:
      - task: render-configs
        vars: { CLUSTER_NAME: "{{.CLUSTER_NAME}}" }
      - task: encrypt-secrets
        vars: { CLUSTER_NAME: "{{.CLUSTER_NAME}}" }
      - task: validate-kubernetes-config
        vars: { CLUSTER_NAME: "{{.CLUSTER_NAME}}" }
    preconditions:
      - sh: '[ -n "{{.CLUSTER_NAME}}" ]'
        msg: "CLUSTER_NAME is required. Pass it via: task :configure -- CLUSTER_NAME=your-cluster"
      - msg: An existing Age key interferes with the age key in this repository, rename or delete ~/.config/sops/age/keys.txt
        sh: '! test -f ~/.config/sops/age/keys.txt'
      - msg: File settings.yaml not found, did you run `task init`?
        sh: test -f {{.TEMPLATE_CONFIG_FILE}}
      # - msg: File cloudflare-tunnel.json not found, see the README for information on creating it.
      #   sh: test -f {{.ROOT_DIR}}/cloudflare-tunnel.json

  render-configs:
    internal: true
    cmds:
      - |
        echo "Rendering configs for cluster: {{.CLUSTER_NAME}}"
      - MAKEJINJA_SETTINGS={{.ROOT_DIR}}/makejinja.toml makejinja -D CLUSTER_NAME={{.CLUSTER_NAME}} -i {{.ROOT_DIR}}/templates/overrides -i {{.ROOT_DIR}}/templates/config/bootstrap -o {{.ROOT_DIR}}/bootstrap/{{.CLUSTER_NAME}}
      - MAKEJINJA_SETTINGS={{.ROOT_DIR}}/makejinja.toml makejinja -D CLUSTER_NAME={{.CLUSTER_NAME}} -i {{.ROOT_DIR}}/templates/overrides -i {{.ROOT_DIR}}/templates/config/kubernetes -o {{.ROOT_DIR}}/kubernetes/{{.CLUSTER_NAME}}
      - MAKEJINJA_SETTINGS={{.ROOT_DIR}}/makejinja.toml makejinja -D CLUSTER_NAME={{.CLUSTER_NAME}} -i {{.ROOT_DIR}}/templates/config/.sops.yaml.j2 -o {{.ROOT_DIR}}/.sops.yaml
    env:
      PYTHONDONTWRITEBYTECODE: "1"
      CLUSTER_NAME: "{{.CLUSTER_NAME}}"
    preconditions:
      - test -f {{.TEMPLATE_DIR}}/scripts/plugin.py
      - test -f {{.MAKEJINJA_CONFIG_FILE}}
      - which makejinja

  encrypt-secrets:
    internal: true
    cmds:
      - |
        echo "Rendering configs for cluster: {{.CLUSTER_NAME}}"
      - for: { var: SECRET_FILES }
        cmd: |
          if sops filestatus "{{.ITEM}}" | jq --exit-status ".encrypted == false" &>/dev/null; then
              sops --encrypt --in-place "{{.ITEM}}"
          fi
    env:
      CLUSTER_NAME: "{{.CLUSTER_NAME}}"
    vars:
      SECRET_FILES:
        sh: find "{{.BOOTSTRAP_DIR}}" "{{.KUBERNETES_DIR}}" -type f -name "*.sops.*" -print
    preconditions:
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - which jq sops

  validate-kubernetes-config:
    internal: true
    env:
      CLUSTER_NAME: "{{.CLUSTER_NAME}}"
    cmds:
      - |
        echo "Rendering configs for cluster: {{.CLUSTER_NAME}}"
      - bash {{.TEMPLATE_RESOURCES_DIR}}/kubeconform.sh {{.KUBERNETES_DIR}}/{{.CLUSTER_NAME}}
    preconditions:
      - test -f {{.TEMPLATE_RESOURCES_DIR}}/kubeconform.sh
      - which kubeconform

  debug:
    desc: Gather common resources in your cluster
    cmds:
      - for:
          matrix:
            RESOURCE:
              [
                certificates,
                certificaterequests,
                gitrepositories,
                helmrepositories,
                helmreleases,
                ingresses,
                kustomizations,
                nodes,
                pods,
              ]
        cmd: kubectl get --all-namespaces {{.ITEM.RESOURCE}}
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which kubectl

  tidy:
    desc: Archive template related files and directories
    prompt: All files and directories related to the templating process will be archived... continue?
    cmds:
      - mkdir -p {{.TIDY_FOLDER}}
      - rm -rf {{.ROOT_DIR}}/.github/tests
      - rm -rf {{.ROOT_DIR}}/.github/workflows/e2e.yaml
      - rm -rf {{.ROOT_DIR}}/.github/workflows/mise.yaml
      - rm -rf {{.ROOT_DIR}}/.github/workflows/release.yaml
      - |
        {{.SED}} -i 's/(..\.j2)\?//g' {{.ROOT_DIR}}/.renovaterc.json5
      - mv {{.TEMPLATE_DIR}} {{.TIDY_FOLDER}}/templates
      - mv {{.MAKEJINJA_CONFIG_FILE}} {{.TIDY_FOLDER}}/makejinja.toml
      # - mv {{.TEMPLATE_CONFIG_FILE}} {{.TIDY_FOLDER}}/cluster.yaml
      # - mv {{.TEMPLATE_NODE_CONFIG_FILE}} {{.TIDY_FOLDER}}/nodes.yaml
      - |
        {{.SED}} -i '/template:/d' {{.ROOT_DIR}}/Taskfile.yaml
      - mv {{.ROOT_DIR}}/.taskfiles/template {{.TIDY_FOLDER}}/.taskfiles/
    vars:
      TIDY_FOLDER: "{{.PRIVATE_DIR}}/{{now | unixEpoch}}"
      SED:
        sh: which gsed || which sed
    preconditions:
      - msg: Unsupported sed version, run `brew install gsed` to upgrade
        sh: '{{if eq OS "darwin"}}test -f /opt/homebrew/bin/gsed || test -f /usr/local/bin/gsed{{end}}'
      - test -d {{.ROOT_DIR}}/.taskfiles/template
      - test -d {{.TEMPLATE_DIR}}
      - test -f {{.MAKEJINJA_CONFIG_FILE}}
      - test -f {{.ROOT_DIR}}/.renovaterc.json5

  reset:
    desc: Remove templated files and directories
    prompt: Remove all templated files and directories... continue?
    cmds:
      - rm -rf {{.BOOTSTRAP_DIR}}
      - rm -rf {{.KUBERNETES_DIR}}
      - rm -rf {{.TALOS_DIR}}
      - rm -rf {{.ROOT_DIR}}/.sops.yaml
